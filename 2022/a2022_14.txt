# part 1 :

def refact(s):
    return list(map(lambda x: list(map(int, x.split(','))), s.split(" -> ")))


input = list(map(refact, open("test.txt").read().split("\n")))


def straight(a, b):
    l = [a, b]
    l.sort()
    if a[0] == b[0]:
        n = abs(b[1]-a[1])
        return [[l[0][0], l[0][1]+i] for i in range(n+1)]
    else:
        n = abs(b[0]-a[0])
        return [[l[0][0]+i, l[0][1]] for i in range(n+1)]

def gen_rocks(l):
    final = []
    for pack in l:
        n = len(pack)
        for i in range(n-1):
            final += straight(pack[i], pack[i+1])
    return final

rocks = gen_rocks(input)
placed_sand = []

abyss = max(a[1] for a in rocks)
print(abyss)
def throw():
    global placed_sand
    begin = [500, 0]
    while begin[1] != abyss:
        if [begin[0], begin[1]+1] not in placed_sand + rocks:
            begin[1] += 1
        elif [begin[0]-1, begin[1]+1] not in placed_sand + rocks:
            begin[0] -= 1
            begin[1] += 1
        elif [begin[0]+1, begin[1]+1] not in placed_sand + rocks:
            begin[0] += 1
            begin[1] += 1
        else:
            break
    if begin[1] >= abyss:
        begin = "stop"
    placed_sand.append(begin)
    return begin

number = 0
while throw() != "stop":
    number += 1

print(number)


