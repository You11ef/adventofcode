# Part 1:


with open("input.txt", "r") as f:
    l = list(map(lambda x:list(x)[:-1], f.readlines()))


def neighbor(l, i, j):
    neighb = []
    if i-1 >= 0:
        neighb.append([i-1, j])
    if j-1 >= 0:
        neighb.append([i, j-1])
    if i+1 < len(l):
        neighb.append([i+1, j])
    if j+1 < len(l[0]):
        neighb.append([i, j+1])
    return neighb


def adjacency_matrix(list):
    n = sum(len(x) for x in list)
    matrix = [[0 for _ in range(n)] for _ in range(n)]
    m = len(list[0])
    begin = 0
    end = 0
    for j, lis in enumerate(list):
        for i, x in enumerate(lis):
            if x == "S":
                list[j][i] = "a"
                begin = i+j*m
            if x == "E":
                list[j][i] = "z"
                end = i+j*m
    for j, lis in enumerate(list):
        for i, x in enumerate(lis):
            neighbors = neighbor(list, j, i)
            for a, b in neighbors:
                if ord(list[j][i]) - ord(list[a][b]) >= -1:
                    matrix[i+j*m][b+m*a] = 1
    return matrix, begin, end

def finder(M, s, e):
    inf = sum(sum(ligne) for ligne in M) + 1
    nb_nodes = len(M)
    s_explore = {s : [0, [s]]}
    s_to_explore = {j : [inf, ""] for j in range(nb_nodes) if j != s}
    for next in range(nb_nodes):
        if M[s][next]:
            s_to_explore[next] = [M[s][next], s]
    while s_to_explore and any(s_to_explore[k][0] < inf for k in s_to_explore):
        s_min = min(s_to_explore, key = s_to_explore.get)
        len_s_min, previous_s_min = s_to_explore[s_min]
        for follow in range(nb_nodes):
            if M[s_min][follow] and follow in s_to_explore:
                dist = len_s_min + M[s_min][follow]
                if dist < s_to_explore[follow][0]:
                    s_to_explore[follow] = [dist, s_min]
        s_explore[s_min] = [len_s_min, s_explore[previous_s_min][1] + [s_min]]
        del s_to_explore[s_min]
        a = f"length {len_s_min} :" + " -> ".join(map(str, s_explore[s_min][1]))
        n = len(str(e))
        try:
            if int(a[-n:]) == e:
                return a
        except ValueError:
            continue

    return s_explore





matrice, begin, end = adjacency_matrix(l)
print(finder(matrice, begin, end))



# Part 2:


with open("input.txt", "r") as f:
    l = list(map(lambda x:list(x)[:-1], f.readlines()))


def neighbor(l, i, j):
    neighb = []
    if i-1 >= 0:
        neighb.append([i-1, j])
    if j-1 >= 0:
        neighb.append([i, j-1])
    if i+1 < len(l):
        neighb.append([i+1, j])
    if j+1 < len(l[0]):
        neighb.append([i, j+1])
    return neighb


def adjacency_matrix(list):
    n = sum(len(x) for x in list)
    matrix = [[0 for _ in range(n)] for _ in range(n)]
    m = len(list[0])
    begin = []
    end = 0
    for j, lis in enumerate(list):
        for i, x in enumerate(lis):
            if x == "S" or x == "a":
                list[j][i] = "a"
                begin.append(i+j*m)
            if x == "E":
                list[j][i] = "z"
                end = i+j*m
    for j, lis in enumerate(list):
        for i, x in enumerate(lis):
            neighbors = neighbor(list, j, i)
            for a, b in neighbors:
                if ord(list[j][i]) - ord(list[a][b]) >= -1:
                    matrix[i+j*m][b+m*a] = 1
    return matrix, begin, end

def finder(M, s, e):
    inf = sum(sum(ligne) for ligne in M) + 1
    nb_nodes = len(M)
    s_explore = {s : [0, [s]]}
    s_to_explore = {j : [inf, ""] for j in range(nb_nodes) if j != s}
    for next in range(nb_nodes):
        if M[s][next]:
            s_to_explore[next] = [M[s][next], s]
    while s_to_explore and any(s_to_explore[k][0] < inf for k in s_to_explore):
        s_min = min(s_to_explore, key = s_to_explore.get)
        len_s_min, previous_s_min = s_to_explore[s_min]
        for follow in range(nb_nodes):
            if M[s_min][follow] and follow in s_to_explore:
                dist = len_s_min + M[s_min][follow]
                if dist < s_to_explore[follow][0]:
                    s_to_explore[follow] = [dist, s_min]
        s_explore[s_min] = [len_s_min, s_explore[previous_s_min][1] + [s_min]]
        del s_to_explore[s_min]
        a = f"length {len_s_min} :" + " -> ".join(map(str, s_explore[s_min][1]))
        n = len(str(e))
        try:
            if int(a[-n:]) == e:
                return a
        except ValueError:
            continue

    return s_explore





matrice, begin, end = adjacency_matrix(l)
c = 1000
for x in begin:
    a = finder(matrice, x, end)
    if isinstance(a, str):
        m = int(a[:a.index(":")].split()[1])
        if m < c:
            c = m
            print(c)
print(c)